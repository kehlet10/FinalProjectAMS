
GccApplication17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000908  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000938  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001175  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d28  00000000  00000000  00001b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000806  00000000  00000000  000028b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f8  00000000  00000000  000030bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000068e  00000000  00000000  000032b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003e0  00000000  00000000  00003942  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00003d22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	eb d1       	rcall	.+982    	; 0x4cc <main>
  f6:	dc c3       	rjmp	.+1976   	; 0x8b0 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <WriteCommand>:

// LOCAL FUNCTIONS /////////////////////////////////////////////////////////////

// ILI 9341 data sheet, page 238
void WriteCommand(unsigned char command)
{
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	1f 92       	push	r1
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
 104:	89 83       	std	Y+1, r24	; 0x01
	
	DATA_PORT_LOW = command; //Data sættes
 106:	88 e2       	ldi	r24, 0x28	; 40
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	29 81       	ldd	r18, Y+1	; 0x01
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
	
	DC_PORT &= ~(1<<DC_BIT); //DC port er 1 nu sætter vi den lavt - And inverteret
 110:	8b e2       	ldi	r24, 0x2B	; 43
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	2b e2       	ldi	r18, 0x2B	; 43
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	f9 01       	movw	r30, r18
 11a:	20 81       	ld	r18, Z
 11c:	2f 77       	andi	r18, 0x7F	; 127
 11e:	fc 01       	movw	r30, r24
 120:	20 83       	st	Z, r18
	
	CS_PORT &= ~(1 << CS_BIT); //CSX sættes lavt
 122:	84 e3       	ldi	r24, 0x34	; 52
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	24 e3       	ldi	r18, 0x34	; 52
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	f9 01       	movw	r30, r18
 12c:	20 81       	ld	r18, Z
 12e:	2d 7f       	andi	r18, 0xFD	; 253
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
	
	WR_PORT &= ~(1 << WR_BIT); //WRX sættes lavt
 134:	84 e3       	ldi	r24, 0x34	; 52
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	24 e3       	ldi	r18, 0x34	; 52
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	f9 01       	movw	r30, r18
 13e:	20 81       	ld	r18, Z
 140:	2b 7f       	andi	r18, 0xFB	; 251
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18
	
	_NOP();
 146:	00 00       	nop

	WR_PORT |= (1<<WR_BIT);
 148:	84 e3       	ldi	r24, 0x34	; 52
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	24 e3       	ldi	r18, 0x34	; 52
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	f9 01       	movw	r30, r18
 152:	20 81       	ld	r18, Z
 154:	24 60       	ori	r18, 0x04	; 4
 156:	fc 01       	movw	r30, r24
 158:	20 83       	st	Z, r18
	
	_NOP();
 15a:	00 00       	nop
	
}
 15c:	00 00       	nop
 15e:	0f 90       	pop	r0
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <WriteData>:

// ILI 9341 data sheet, page 238
void WriteData(unsigned int data)
{
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	1f 92       	push	r1
 16c:	1f 92       	push	r1
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
 172:	9a 83       	std	Y+2, r25	; 0x02
 174:	89 83       	std	Y+1, r24	; 0x01
	DATA_PORT_HIGH =  data >> 8;
 176:	82 e2       	ldi	r24, 0x22	; 34
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	29 81       	ldd	r18, Y+1	; 0x01
 17c:	3a 81       	ldd	r19, Y+2	; 0x02
 17e:	23 2f       	mov	r18, r19
 180:	33 27       	eor	r19, r19
 182:	fc 01       	movw	r30, r24
 184:	20 83       	st	Z, r18
	DATA_PORT_LOW = data; //Data sættes
 186:	88 e2       	ldi	r24, 0x28	; 40
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	29 81       	ldd	r18, Y+1	; 0x01
 18c:	fc 01       	movw	r30, r24
 18e:	20 83       	st	Z, r18
	
	DC_PORT |= (1<< DC_BIT); //DC port er 1 nu sætter vi den lavt - And inverteret
 190:	8b e2       	ldi	r24, 0x2B	; 43
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	2b e2       	ldi	r18, 0x2B	; 43
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	f9 01       	movw	r30, r18
 19a:	20 81       	ld	r18, Z
 19c:	20 68       	ori	r18, 0x80	; 128
 19e:	fc 01       	movw	r30, r24
 1a0:	20 83       	st	Z, r18
	
	CS_PORT &= ~(1 << CS_BIT); //CSX sættes lavt
 1a2:	84 e3       	ldi	r24, 0x34	; 52
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	24 e3       	ldi	r18, 0x34	; 52
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	f9 01       	movw	r30, r18
 1ac:	20 81       	ld	r18, Z
 1ae:	2d 7f       	andi	r18, 0xFD	; 253
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
	WR_PORT &= ~(1 << WR_BIT); //WRX sættes lavt
 1b4:	84 e3       	ldi	r24, 0x34	; 52
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	24 e3       	ldi	r18, 0x34	; 52
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	f9 01       	movw	r30, r18
 1be:	20 81       	ld	r18, Z
 1c0:	2b 7f       	andi	r18, 0xFB	; 251
 1c2:	fc 01       	movw	r30, r24
 1c4:	20 83       	st	Z, r18
	
	_NOP(); //twr0 > 15 nanosekunder
 1c6:	00 00       	nop
	
	WR_PORT |= (1 << WR_BIT);
 1c8:	84 e3       	ldi	r24, 0x34	; 52
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	24 e3       	ldi	r18, 0x34	; 52
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	f9 01       	movw	r30, r18
 1d2:	20 81       	ld	r18, Z
 1d4:	24 60       	ori	r18, 0x04	; 4
 1d6:	fc 01       	movw	r30, r24
 1d8:	20 83       	st	Z, r18
	
	_NOP();
 1da:	00 00       	nop
}
 1dc:	00 00       	nop
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <DisplayInit>:

// PUBLIC FUNCTIONS ////////////////////////////////////////////////////////////

// Initializes (resets) the display
void DisplayInit()
{
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 1f0:	6c 97       	sbiw	r28, 0x1c	; 28
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	f8 94       	cli
 1f6:	de bf       	out	0x3e, r29	; 62
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	cd bf       	out	0x3d, r28	; 61
	//Controlpins skal være input
	DDRD |= 0b00000111;
 1fc:	8a e2       	ldi	r24, 0x2A	; 42
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	2a e2       	ldi	r18, 0x2A	; 42
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	f9 01       	movw	r30, r18
 206:	20 81       	ld	r18, Z
 208:	27 60       	ori	r18, 0x07	; 7
 20a:	fc 01       	movw	r30, r24
 20c:	20 83       	st	Z, r18
	DDRG |= 0b10000000;
 20e:	83 e3       	ldi	r24, 0x33	; 51
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	23 e3       	ldi	r18, 0x33	; 51
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	f9 01       	movw	r30, r18
 218:	20 81       	ld	r18, Z
 21a:	20 68       	ori	r18, 0x80	; 128
 21c:	fc 01       	movw	r30, r24
 21e:	20 83       	st	Z, r18
	//Data pins skal være outputs
	DDRA = 0xFF;
 220:	81 e2       	ldi	r24, 0x21	; 33
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	2f ef       	ldi	r18, 0xFF	; 255
 226:	fc 01       	movw	r30, r24
 228:	20 83       	st	Z, r18
	DDRC = 0xFF;
 22a:	87 e2       	ldi	r24, 0x27	; 39
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	2f ef       	ldi	r18, 0xFF	; 255
 230:	fc 01       	movw	r30, r24
 232:	20 83       	st	Z, r18
	
	PORTG |= 0b00000111;
 234:	84 e3       	ldi	r24, 0x34	; 52
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	24 e3       	ldi	r18, 0x34	; 52
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	f9 01       	movw	r30, r18
 23e:	20 81       	ld	r18, Z
 240:	27 60       	ori	r18, 0x07	; 7
 242:	fc 01       	movw	r30, r24
 244:	20 83       	st	Z, r18
	PORTD |= 0b10000000;
 246:	8b e2       	ldi	r24, 0x2B	; 43
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	2b e2       	ldi	r18, 0x2B	; 43
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	f9 01       	movw	r30, r18
 250:	20 81       	ld	r18, Z
 252:	20 68       	ori	r18, 0x80	; 128
 254:	fc 01       	movw	r30, r24
 256:	20 83       	st	Z, r18
	
	RST_PORT &= ~(1<<RST_BIT);
 258:	84 e3       	ldi	r24, 0x34	; 52
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	24 e3       	ldi	r18, 0x34	; 52
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	f9 01       	movw	r30, r18
 262:	20 81       	ld	r18, Z
 264:	2e 7f       	andi	r18, 0xFE	; 254
 266:	fc 01       	movw	r30, r24
 268:	20 83       	st	Z, r18
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	aa ef       	ldi	r26, 0xFA	; 250
 270:	b3 e4       	ldi	r27, 0x43	; 67
 272:	89 83       	std	Y+1, r24	; 0x01
 274:	9a 83       	std	Y+2, r25	; 0x02
 276:	ab 83       	std	Y+3, r26	; 0x03
 278:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 27a:	20 e0       	ldi	r18, 0x00	; 0
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	4a e7       	ldi	r20, 0x7A	; 122
 280:	55 e4       	ldi	r21, 0x45	; 69
 282:	69 81       	ldd	r22, Y+1	; 0x01
 284:	7a 81       	ldd	r23, Y+2	; 0x02
 286:	8b 81       	ldd	r24, Y+3	; 0x03
 288:	9c 81       	ldd	r25, Y+4	; 0x04
 28a:	87 d2       	rcall	.+1294   	; 0x79a <__mulsf3>
 28c:	dc 01       	movw	r26, r24
 28e:	cb 01       	movw	r24, r22
 290:	8b 8b       	std	Y+19, r24	; 0x13
 292:	9c 8b       	std	Y+20, r25	; 0x14
 294:	ad 8b       	std	Y+21, r26	; 0x15
 296:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	40 e8       	ldi	r20, 0x80	; 128
 29e:	5f e3       	ldi	r21, 0x3F	; 63
 2a0:	6b 89       	ldd	r22, Y+19	; 0x13
 2a2:	7c 89       	ldd	r23, Y+20	; 0x14
 2a4:	8d 89       	ldd	r24, Y+21	; 0x15
 2a6:	9e 89       	ldd	r25, Y+22	; 0x16
 2a8:	f7 d1       	rcall	.+1006   	; 0x698 <__cmpsf2>
 2aa:	88 23       	and	r24, r24
 2ac:	2c f4       	brge	.+10     	; 0x2b8 <DisplayInit+0xd0>
		__ticks = 1;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	98 8f       	std	Y+24, r25	; 0x18
 2b4:	8f 8b       	std	Y+23, r24	; 0x17
 2b6:	3b c0       	rjmp	.+118    	; 0x32e <DisplayInit+0x146>
	else if (__tmp > 65535)
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	3f ef       	ldi	r19, 0xFF	; 255
 2bc:	4f e7       	ldi	r20, 0x7F	; 127
 2be:	57 e4       	ldi	r21, 0x47	; 71
 2c0:	6b 89       	ldd	r22, Y+19	; 0x13
 2c2:	7c 89       	ldd	r23, Y+20	; 0x14
 2c4:	8d 89       	ldd	r24, Y+21	; 0x15
 2c6:	9e 89       	ldd	r25, Y+22	; 0x16
 2c8:	64 d2       	rcall	.+1224   	; 0x792 <__gesf2>
 2ca:	18 16       	cp	r1, r24
 2cc:	3c f5       	brge	.+78     	; 0x31c <DisplayInit+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2ce:	20 e0       	ldi	r18, 0x00	; 0
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	40 e2       	ldi	r20, 0x20	; 32
 2d4:	51 e4       	ldi	r21, 0x41	; 65
 2d6:	69 81       	ldd	r22, Y+1	; 0x01
 2d8:	7a 81       	ldd	r23, Y+2	; 0x02
 2da:	8b 81       	ldd	r24, Y+3	; 0x03
 2dc:	9c 81       	ldd	r25, Y+4	; 0x04
 2de:	5d d2       	rcall	.+1210   	; 0x79a <__mulsf3>
 2e0:	dc 01       	movw	r26, r24
 2e2:	cb 01       	movw	r24, r22
 2e4:	bc 01       	movw	r22, r24
 2e6:	cd 01       	movw	r24, r26
 2e8:	db d1       	rcall	.+950    	; 0x6a0 <__fixunssfsi>
 2ea:	dc 01       	movw	r26, r24
 2ec:	cb 01       	movw	r24, r22
 2ee:	98 8f       	std	Y+24, r25	; 0x18
 2f0:	8f 8b       	std	Y+23, r24	; 0x17
 2f2:	0f c0       	rjmp	.+30     	; 0x312 <DisplayInit+0x12a>
 2f4:	80 e9       	ldi	r24, 0x90	; 144
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	9a 8f       	std	Y+26, r25	; 0x1a
 2fa:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2fc:	89 8d       	ldd	r24, Y+25	; 0x19
 2fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <DisplayInit+0x118>
 304:	9a 8f       	std	Y+26, r25	; 0x1a
 306:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 308:	8f 89       	ldd	r24, Y+23	; 0x17
 30a:	98 8d       	ldd	r25, Y+24	; 0x18
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	98 8f       	std	Y+24, r25	; 0x18
 310:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 312:	8f 89       	ldd	r24, Y+23	; 0x17
 314:	98 8d       	ldd	r25, Y+24	; 0x18
 316:	89 2b       	or	r24, r25
 318:	69 f7       	brne	.-38     	; 0x2f4 <DisplayInit+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 31a:	13 c0       	rjmp	.+38     	; 0x342 <DisplayInit+0x15a>
 31c:	6b 89       	ldd	r22, Y+19	; 0x13
 31e:	7c 89       	ldd	r23, Y+20	; 0x14
 320:	8d 89       	ldd	r24, Y+21	; 0x15
 322:	9e 89       	ldd	r25, Y+22	; 0x16
 324:	bd d1       	rcall	.+890    	; 0x6a0 <__fixunssfsi>
 326:	dc 01       	movw	r26, r24
 328:	cb 01       	movw	r24, r22
 32a:	98 8f       	std	Y+24, r25	; 0x18
 32c:	8f 8b       	std	Y+23, r24	; 0x17
 32e:	8f 89       	ldd	r24, Y+23	; 0x17
 330:	98 8d       	ldd	r25, Y+24	; 0x18
 332:	9c 8f       	std	Y+28, r25	; 0x1c
 334:	8b 8f       	std	Y+27, r24	; 0x1b
 336:	8b 8d       	ldd	r24, Y+27	; 0x1b
 338:	9c 8d       	ldd	r25, Y+28	; 0x1c
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <DisplayInit+0x152>
 33e:	9c 8f       	std	Y+28, r25	; 0x1c
 340:	8b 8f       	std	Y+27, r24	; 0x1b
	
	_delay_ms(500);
	
	RST_PORT |= (1<<RST_BIT);
 342:	84 e3       	ldi	r24, 0x34	; 52
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	24 e3       	ldi	r18, 0x34	; 52
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	f9 01       	movw	r30, r18
 34c:	20 81       	ld	r18, Z
 34e:	21 60       	ori	r18, 0x01	; 1
 350:	fc 01       	movw	r30, r24
 352:	20 83       	st	Z, r18
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	a2 e0       	ldi	r26, 0x02	; 2
 35a:	b3 e4       	ldi	r27, 0x43	; 67
 35c:	8d 83       	std	Y+5, r24	; 0x05
 35e:	9e 83       	std	Y+6, r25	; 0x06
 360:	af 83       	std	Y+7, r26	; 0x07
 362:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 364:	20 e0       	ldi	r18, 0x00	; 0
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	4a e7       	ldi	r20, 0x7A	; 122
 36a:	55 e4       	ldi	r21, 0x45	; 69
 36c:	6d 81       	ldd	r22, Y+5	; 0x05
 36e:	7e 81       	ldd	r23, Y+6	; 0x06
 370:	8f 81       	ldd	r24, Y+7	; 0x07
 372:	98 85       	ldd	r25, Y+8	; 0x08
 374:	12 d2       	rcall	.+1060   	; 0x79a <__mulsf3>
 376:	dc 01       	movw	r26, r24
 378:	cb 01       	movw	r24, r22
 37a:	89 87       	std	Y+9, r24	; 0x09
 37c:	9a 87       	std	Y+10, r25	; 0x0a
 37e:	ab 87       	std	Y+11, r26	; 0x0b
 380:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 382:	20 e0       	ldi	r18, 0x00	; 0
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	40 e8       	ldi	r20, 0x80	; 128
 388:	5f e3       	ldi	r21, 0x3F	; 63
 38a:	69 85       	ldd	r22, Y+9	; 0x09
 38c:	7a 85       	ldd	r23, Y+10	; 0x0a
 38e:	8b 85       	ldd	r24, Y+11	; 0x0b
 390:	9c 85       	ldd	r25, Y+12	; 0x0c
 392:	82 d1       	rcall	.+772    	; 0x698 <__cmpsf2>
 394:	88 23       	and	r24, r24
 396:	2c f4       	brge	.+10     	; 0x3a2 <DisplayInit+0x1ba>
		__ticks = 1;
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	9e 87       	std	Y+14, r25	; 0x0e
 39e:	8d 87       	std	Y+13, r24	; 0x0d
 3a0:	3b c0       	rjmp	.+118    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	else if (__tmp > 65535)
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	3f ef       	ldi	r19, 0xFF	; 255
 3a6:	4f e7       	ldi	r20, 0x7F	; 127
 3a8:	57 e4       	ldi	r21, 0x47	; 71
 3aa:	69 85       	ldd	r22, Y+9	; 0x09
 3ac:	7a 85       	ldd	r23, Y+10	; 0x0a
 3ae:	8b 85       	ldd	r24, Y+11	; 0x0b
 3b0:	9c 85       	ldd	r25, Y+12	; 0x0c
 3b2:	ef d1       	rcall	.+990    	; 0x792 <__gesf2>
 3b4:	18 16       	cp	r1, r24
 3b6:	3c f5       	brge	.+78     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	40 e2       	ldi	r20, 0x20	; 32
 3be:	51 e4       	ldi	r21, 0x41	; 65
 3c0:	6d 81       	ldd	r22, Y+5	; 0x05
 3c2:	7e 81       	ldd	r23, Y+6	; 0x06
 3c4:	8f 81       	ldd	r24, Y+7	; 0x07
 3c6:	98 85       	ldd	r25, Y+8	; 0x08
 3c8:	e8 d1       	rcall	.+976    	; 0x79a <__mulsf3>
 3ca:	dc 01       	movw	r26, r24
 3cc:	cb 01       	movw	r24, r22
 3ce:	bc 01       	movw	r22, r24
 3d0:	cd 01       	movw	r24, r26
 3d2:	66 d1       	rcall	.+716    	; 0x6a0 <__fixunssfsi>
 3d4:	dc 01       	movw	r26, r24
 3d6:	cb 01       	movw	r24, r22
 3d8:	9e 87       	std	Y+14, r25	; 0x0e
 3da:	8d 87       	std	Y+13, r24	; 0x0d
 3dc:	0f c0       	rjmp	.+30     	; 0x3fc <DisplayInit+0x214>
 3de:	80 e9       	ldi	r24, 0x90	; 144
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	98 8b       	std	Y+16, r25	; 0x10
 3e4:	8f 87       	std	Y+15, r24	; 0x0f
 3e6:	8f 85       	ldd	r24, Y+15	; 0x0f
 3e8:	98 89       	ldd	r25, Y+16	; 0x10
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <DisplayInit+0x202>
 3ee:	98 8b       	std	Y+16, r25	; 0x10
 3f0:	8f 87       	std	Y+15, r24	; 0x0f
 3f2:	8d 85       	ldd	r24, Y+13	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3f4:	9e 85       	ldd	r25, Y+14	; 0x0e
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	9e 87       	std	Y+14, r25	; 0x0e
 3fa:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3fc:	8d 85       	ldd	r24, Y+13	; 0x0d
 3fe:	9e 85       	ldd	r25, Y+14	; 0x0e
 400:	89 2b       	or	r24, r25
 402:	69 f7       	brne	.-38     	; 0x3de <DisplayInit+0x1f6>
 404:	13 c0       	rjmp	.+38     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 406:	69 85       	ldd	r22, Y+9	; 0x09
 408:	7a 85       	ldd	r23, Y+10	; 0x0a
 40a:	8b 85       	ldd	r24, Y+11	; 0x0b
 40c:	9c 85       	ldd	r25, Y+12	; 0x0c
 40e:	48 d1       	rcall	.+656    	; 0x6a0 <__fixunssfsi>
 410:	dc 01       	movw	r26, r24
 412:	cb 01       	movw	r24, r22
 414:	9e 87       	std	Y+14, r25	; 0x0e
 416:	8d 87       	std	Y+13, r24	; 0x0d
 418:	8d 85       	ldd	r24, Y+13	; 0x0d
 41a:	9e 85       	ldd	r25, Y+14	; 0x0e
 41c:	9a 8b       	std	Y+18, r25	; 0x12
 41e:	89 8b       	std	Y+17, r24	; 0x11
 420:	89 89       	ldd	r24, Y+17	; 0x11
 422:	9a 89       	ldd	r25, Y+18	; 0x12
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		
	_delay_ms(130);
	
	SleepOut();
 428:	9a 8b       	std	Y+18, r25	; 0x12
 42a:	89 8b       	std	Y+17, r24	; 0x11

	DisplayOn();
 42c:	23 d0       	rcall	.+70     	; 0x474 <SleepOut>
 42e:	18 d0       	rcall	.+48     	; 0x460 <DisplayOn>
	
	
	MemoryAccessControl(0b00001000);
 430:	88 e0       	ldi	r24, 0x08	; 8
 432:	2a d0       	rcall	.+84     	; 0x488 <MemoryAccessControl>
 434:	85 e0       	ldi	r24, 0x05	; 5
	InterfacePixelFormat(0b00000101);
 436:	39 d0       	rcall	.+114    	; 0x4aa <InterfacePixelFormat>
 438:	00 00       	nop
 43a:	6c 96       	adiw	r28, 0x1c	; 28
}
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	f8 94       	cli
 440:	de bf       	out	0x3e, r29	; 62
 442:	0f be       	out	0x3f, r0	; 63
 444:	cd bf       	out	0x3d, r28	; 61
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	08 95       	ret

0000044c <DisplayOff>:
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29

void DisplayOff()
{
 450:	cd b7       	in	r28, 0x3d	; 61
 452:	de b7       	in	r29, 0x3e	; 62
	WriteCommand(0x28);
 454:	88 e2       	ldi	r24, 0x28	; 40
 456:	51 de       	rcall	.-862    	; 0xfa <WriteCommand>
}
 458:	00 00       	nop
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	08 95       	ret

00000460 <DisplayOn>:

void DisplayOn()
{
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
	
	WriteCommand(0x29);
 468:	89 e2       	ldi	r24, 0x29	; 41
 46a:	47 de       	rcall	.-882    	; 0xfa <WriteCommand>
}
 46c:	00 00       	nop
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	08 95       	ret

00000474 <SleepOut>:

void SleepOut()
{
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	cd b7       	in	r28, 0x3d	; 61
 47a:	de b7       	in	r29, 0x3e	; 62
	WriteCommand(0x11);
 47c:	81 e1       	ldi	r24, 0x11	; 17
 47e:	3d de       	rcall	.-902    	; 0xfa <WriteCommand>
}
 480:	00 00       	nop
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	08 95       	ret

00000488 <MemoryAccessControl>:

void MemoryAccessControl(unsigned char parameter)
{
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	1f 92       	push	r1
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
 492:	89 83       	std	Y+1, r24	; 0x01
	WriteCommand(0x36);
 494:	86 e3       	ldi	r24, 0x36	; 54
 496:	31 de       	rcall	.-926    	; 0xfa <WriteCommand>
	WriteData(parameter);
 498:	89 81       	ldd	r24, Y+1	; 0x01
 49a:	88 2f       	mov	r24, r24
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	63 de       	rcall	.-826    	; 0x166 <WriteData>
}
 4a0:	00 00       	nop
 4a2:	0f 90       	pop	r0
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	08 95       	ret

000004aa <InterfacePixelFormat>:

void InterfacePixelFormat(unsigned char parameter)
{
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	1f 92       	push	r1
 4b0:	cd b7       	in	r28, 0x3d	; 61
 4b2:	de b7       	in	r29, 0x3e	; 62
 4b4:	89 83       	std	Y+1, r24	; 0x01
	WriteCommand(0x3A);
 4b6:	8a e3       	ldi	r24, 0x3A	; 58
 4b8:	20 de       	rcall	.-960    	; 0xfa <WriteCommand>
	WriteData(parameter);
 4ba:	89 81       	ldd	r24, Y+1	; 0x01
 4bc:	88 2f       	mov	r24, r24
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	52 de       	rcall	.-860    	; 0x166 <WriteData>
}
 4c2:	00 00       	nop
 4c4:	0f 90       	pop	r0
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	08 95       	ret

000004cc <main>:
#define F_CPU 16000000
#include <util/delay.h>
#include "TFTdriver.h"

int main(void)
{
 4cc:	cf 93       	push	r28
 4ce:	df 93       	push	r29
 4d0:	cd b7       	in	r28, 0x3d	; 61
 4d2:	de b7       	in	r29, 0x3e	; 62
 4d4:	6c 97       	sbiw	r28, 0x1c	; 28
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	f8 94       	cli
 4da:	de bf       	out	0x3e, r29	; 62
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	cd bf       	out	0x3d, r28	; 61
  // Initialize the display
  DisplayInit();
 4e0:	83 de       	rcall	.-762    	; 0x1e8 <DisplayInit>
  //FillRectangle(140,0,320-140,100,31,0,0);
  //FillRectangle(140,140,320-140,100,31,0,0);      
 
  while(1)
  {
    DisplayOn();
 4e2:	be df       	rcall	.-132    	; 0x460 <DisplayOn>
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	aa e7       	ldi	r26, 0x7A	; 122
 4ea:	b4 e4       	ldi	r27, 0x44	; 68
 4ec:	89 83       	std	Y+1, r24	; 0x01
 4ee:	9a 83       	std	Y+2, r25	; 0x02
 4f0:	ab 83       	std	Y+3, r26	; 0x03
 4f2:	bc 83       	std	Y+4, r27	; 0x04
 4f4:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	4a e7       	ldi	r20, 0x7A	; 122
 4fa:	55 e4       	ldi	r21, 0x45	; 69
 4fc:	69 81       	ldd	r22, Y+1	; 0x01
 4fe:	7a 81       	ldd	r23, Y+2	; 0x02
 500:	8b 81       	ldd	r24, Y+3	; 0x03
 502:	9c 81       	ldd	r25, Y+4	; 0x04
 504:	4a d1       	rcall	.+660    	; 0x79a <__mulsf3>
 506:	dc 01       	movw	r26, r24
 508:	cb 01       	movw	r24, r22
 50a:	8b 8b       	std	Y+19, r24	; 0x13
 50c:	9c 8b       	std	Y+20, r25	; 0x14
 50e:	ad 8b       	std	Y+21, r26	; 0x15
 510:	be 8b       	std	Y+22, r27	; 0x16
 512:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	40 e8       	ldi	r20, 0x80	; 128
 518:	5f e3       	ldi	r21, 0x3F	; 63
 51a:	6b 89       	ldd	r22, Y+19	; 0x13
 51c:	7c 89       	ldd	r23, Y+20	; 0x14
 51e:	8d 89       	ldd	r24, Y+21	; 0x15
 520:	9e 89       	ldd	r25, Y+22	; 0x16
 522:	ba d0       	rcall	.+372    	; 0x698 <__cmpsf2>
 524:	88 23       	and	r24, r24
 526:	2c f4       	brge	.+10     	; 0x532 <main+0x66>
 528:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	98 8f       	std	Y+24, r25	; 0x18
 52e:	8f 8b       	std	Y+23, r24	; 0x17
 530:	3b c0       	rjmp	.+118    	; 0x5a8 <main+0xdc>
 532:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
 534:	3f ef       	ldi	r19, 0xFF	; 255
 536:	4f e7       	ldi	r20, 0x7F	; 127
 538:	57 e4       	ldi	r21, 0x47	; 71
 53a:	6b 89       	ldd	r22, Y+19	; 0x13
 53c:	7c 89       	ldd	r23, Y+20	; 0x14
 53e:	8d 89       	ldd	r24, Y+21	; 0x15
 540:	9e 89       	ldd	r25, Y+22	; 0x16
 542:	27 d1       	rcall	.+590    	; 0x792 <__gesf2>
 544:	18 16       	cp	r1, r24
 546:	3c f5       	brge	.+78     	; 0x596 <main+0xca>
 548:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	40 e2       	ldi	r20, 0x20	; 32
 54e:	51 e4       	ldi	r21, 0x41	; 65
 550:	69 81       	ldd	r22, Y+1	; 0x01
 552:	7a 81       	ldd	r23, Y+2	; 0x02
 554:	8b 81       	ldd	r24, Y+3	; 0x03
 556:	9c 81       	ldd	r25, Y+4	; 0x04
 558:	20 d1       	rcall	.+576    	; 0x79a <__mulsf3>
 55a:	dc 01       	movw	r26, r24
 55c:	cb 01       	movw	r24, r22
 55e:	bc 01       	movw	r22, r24
 560:	cd 01       	movw	r24, r26
 562:	9e d0       	rcall	.+316    	; 0x6a0 <__fixunssfsi>
 564:	dc 01       	movw	r26, r24
 566:	cb 01       	movw	r24, r22
 568:	98 8f       	std	Y+24, r25	; 0x18
 56a:	8f 8b       	std	Y+23, r24	; 0x17
 56c:	0f c0       	rjmp	.+30     	; 0x58c <main+0xc0>
 56e:	80 e9       	ldi	r24, 0x90	; 144
 570:	91 e0       	ldi	r25, 0x01	; 1
 572:	9a 8f       	std	Y+26, r25	; 0x1a
 574:	89 8f       	std	Y+25, r24	; 0x19
 576:	89 8d       	ldd	r24, Y+25	; 0x19
 578:	9a 8d       	ldd	r25, Y+26	; 0x1a
 57a:	01 97       	sbiw	r24, 0x01	; 1
 57c:	f1 f7       	brne	.-4      	; 0x57a <main+0xae>
 57e:	9a 8f       	std	Y+26, r25	; 0x1a
 580:	89 8f       	std	Y+25, r24	; 0x19
 582:	8f 89       	ldd	r24, Y+23	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 584:	98 8d       	ldd	r25, Y+24	; 0x18
 586:	01 97       	sbiw	r24, 0x01	; 1
 588:	98 8f       	std	Y+24, r25	; 0x18
 58a:	8f 8b       	std	Y+23, r24	; 0x17
 58c:	8f 89       	ldd	r24, Y+23	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 58e:	98 8d       	ldd	r25, Y+24	; 0x18
 590:	89 2b       	or	r24, r25
 592:	69 f7       	brne	.-38     	; 0x56e <main+0xa2>
 594:	13 c0       	rjmp	.+38     	; 0x5bc <main+0xf0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 596:	6b 89       	ldd	r22, Y+19	; 0x13
 598:	7c 89       	ldd	r23, Y+20	; 0x14
 59a:	8d 89       	ldd	r24, Y+21	; 0x15
 59c:	9e 89       	ldd	r25, Y+22	; 0x16
 59e:	80 d0       	rcall	.+256    	; 0x6a0 <__fixunssfsi>
 5a0:	dc 01       	movw	r26, r24
 5a2:	cb 01       	movw	r24, r22
 5a4:	98 8f       	std	Y+24, r25	; 0x18
 5a6:	8f 8b       	std	Y+23, r24	; 0x17
 5a8:	8f 89       	ldd	r24, Y+23	; 0x17
 5aa:	98 8d       	ldd	r25, Y+24	; 0x18
 5ac:	9c 8f       	std	Y+28, r25	; 0x1c
 5ae:	8b 8f       	std	Y+27, r24	; 0x1b
 5b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
 5b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
 5b4:	01 97       	sbiw	r24, 0x01	; 1
 5b6:	f1 f7       	brne	.-4      	; 0x5b4 <main+0xe8>
 5b8:	9c 8f       	std	Y+28, r25	; 0x1c
 5ba:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(1000);
    DisplayOff();
 5bc:	47 df       	rcall	.-370    	; 0x44c <DisplayOff>
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	aa e7       	ldi	r26, 0x7A	; 122
 5c4:	b4 e4       	ldi	r27, 0x44	; 68
 5c6:	8d 83       	std	Y+5, r24	; 0x05
 5c8:	9e 83       	std	Y+6, r25	; 0x06
 5ca:	af 83       	std	Y+7, r26	; 0x07
 5cc:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 5ce:	20 e0       	ldi	r18, 0x00	; 0
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	4a e7       	ldi	r20, 0x7A	; 122
 5d4:	55 e4       	ldi	r21, 0x45	; 69
 5d6:	6d 81       	ldd	r22, Y+5	; 0x05
 5d8:	7e 81       	ldd	r23, Y+6	; 0x06
 5da:	8f 81       	ldd	r24, Y+7	; 0x07
 5dc:	98 85       	ldd	r25, Y+8	; 0x08
 5de:	dd d0       	rcall	.+442    	; 0x79a <__mulsf3>
 5e0:	dc 01       	movw	r26, r24
 5e2:	cb 01       	movw	r24, r22
 5e4:	89 87       	std	Y+9, r24	; 0x09
 5e6:	9a 87       	std	Y+10, r25	; 0x0a
 5e8:	ab 87       	std	Y+11, r26	; 0x0b
 5ea:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 5ec:	20 e0       	ldi	r18, 0x00	; 0
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	40 e8       	ldi	r20, 0x80	; 128
 5f2:	5f e3       	ldi	r21, 0x3F	; 63
 5f4:	69 85       	ldd	r22, Y+9	; 0x09
 5f6:	7a 85       	ldd	r23, Y+10	; 0x0a
 5f8:	8b 85       	ldd	r24, Y+11	; 0x0b
 5fa:	9c 85       	ldd	r25, Y+12	; 0x0c
 5fc:	4d d0       	rcall	.+154    	; 0x698 <__cmpsf2>
 5fe:	88 23       	and	r24, r24
 600:	2c f4       	brge	.+10     	; 0x60c <main+0x140>
 602:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	9e 87       	std	Y+14, r25	; 0x0e
 608:	8d 87       	std	Y+13, r24	; 0x0d
 60a:	3b c0       	rjmp	.+118    	; 0x682 <main+0x1b6>
	else if (__tmp > 65535)
 60c:	20 e0       	ldi	r18, 0x00	; 0
 60e:	3f ef       	ldi	r19, 0xFF	; 255
 610:	4f e7       	ldi	r20, 0x7F	; 127
 612:	57 e4       	ldi	r21, 0x47	; 71
 614:	69 85       	ldd	r22, Y+9	; 0x09
 616:	7a 85       	ldd	r23, Y+10	; 0x0a
 618:	8b 85       	ldd	r24, Y+11	; 0x0b
 61a:	9c 85       	ldd	r25, Y+12	; 0x0c
 61c:	ba d0       	rcall	.+372    	; 0x792 <__gesf2>
 61e:	18 16       	cp	r1, r24
 620:	3c f5       	brge	.+78     	; 0x670 <main+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 622:	20 e0       	ldi	r18, 0x00	; 0
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	40 e2       	ldi	r20, 0x20	; 32
 628:	51 e4       	ldi	r21, 0x41	; 65
 62a:	6d 81       	ldd	r22, Y+5	; 0x05
 62c:	7e 81       	ldd	r23, Y+6	; 0x06
 62e:	8f 81       	ldd	r24, Y+7	; 0x07
 630:	98 85       	ldd	r25, Y+8	; 0x08
 632:	b3 d0       	rcall	.+358    	; 0x79a <__mulsf3>
 634:	dc 01       	movw	r26, r24
 636:	cb 01       	movw	r24, r22
 638:	bc 01       	movw	r22, r24
 63a:	cd 01       	movw	r24, r26
 63c:	31 d0       	rcall	.+98     	; 0x6a0 <__fixunssfsi>
 63e:	dc 01       	movw	r26, r24
 640:	cb 01       	movw	r24, r22
 642:	9e 87       	std	Y+14, r25	; 0x0e
 644:	8d 87       	std	Y+13, r24	; 0x0d
 646:	0f c0       	rjmp	.+30     	; 0x666 <main+0x19a>
 648:	80 e9       	ldi	r24, 0x90	; 144
 64a:	91 e0       	ldi	r25, 0x01	; 1
 64c:	98 8b       	std	Y+16, r25	; 0x10
 64e:	8f 87       	std	Y+15, r24	; 0x0f
 650:	8f 85       	ldd	r24, Y+15	; 0x0f
 652:	98 89       	ldd	r25, Y+16	; 0x10
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	f1 f7       	brne	.-4      	; 0x654 <main+0x188>
 658:	98 8b       	std	Y+16, r25	; 0x10
 65a:	8f 87       	std	Y+15, r24	; 0x0f
 65c:	8d 85       	ldd	r24, Y+13	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 65e:	9e 85       	ldd	r25, Y+14	; 0x0e
 660:	01 97       	sbiw	r24, 0x01	; 1
 662:	9e 87       	std	Y+14, r25	; 0x0e
 664:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 666:	8d 85       	ldd	r24, Y+13	; 0x0d
 668:	9e 85       	ldd	r25, Y+14	; 0x0e
 66a:	89 2b       	or	r24, r25
 66c:	69 f7       	brne	.-38     	; 0x648 <main+0x17c>
 66e:	13 c0       	rjmp	.+38     	; 0x696 <main+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 670:	69 85       	ldd	r22, Y+9	; 0x09
 672:	7a 85       	ldd	r23, Y+10	; 0x0a
 674:	8b 85       	ldd	r24, Y+11	; 0x0b
 676:	9c 85       	ldd	r25, Y+12	; 0x0c
 678:	13 d0       	rcall	.+38     	; 0x6a0 <__fixunssfsi>
 67a:	dc 01       	movw	r26, r24
 67c:	cb 01       	movw	r24, r22
 67e:	9e 87       	std	Y+14, r25	; 0x0e
 680:	8d 87       	std	Y+13, r24	; 0x0d
 682:	8d 85       	ldd	r24, Y+13	; 0x0d
 684:	9e 85       	ldd	r25, Y+14	; 0x0e
 686:	9a 8b       	std	Y+18, r25	; 0x12
 688:	89 8b       	std	Y+17, r24	; 0x11
 68a:	89 89       	ldd	r24, Y+17	; 0x11
 68c:	9a 89       	ldd	r25, Y+18	; 0x12
 68e:	01 97       	sbiw	r24, 0x01	; 1
 690:	f1 f7       	brne	.-4      	; 0x68e <main+0x1c2>
 692:	9a 8b       	std	Y+18, r25	; 0x12
 694:	89 8b       	std	Y+17, r24	; 0x11
 696:	25 cf       	rjmp	.-438    	; 0x4e2 <main+0x16>

00000698 <__cmpsf2>:
	_delay_ms(1000);
  } 
 698:	2f d0       	rcall	.+94     	; 0x6f8 <__fp_cmp>
 69a:	08 f4       	brcc	.+2      	; 0x69e <__cmpsf2+0x6>
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	08 95       	ret

000006a0 <__fixunssfsi>:
 6a0:	57 d0       	rcall	.+174    	; 0x750 <__fp_splitA>
 6a2:	88 f0       	brcs	.+34     	; 0x6c6 <__fixunssfsi+0x26>
 6a4:	9f 57       	subi	r25, 0x7F	; 127
 6a6:	90 f0       	brcs	.+36     	; 0x6cc <__fixunssfsi+0x2c>
 6a8:	b9 2f       	mov	r27, r25
 6aa:	99 27       	eor	r25, r25
 6ac:	b7 51       	subi	r27, 0x17	; 23
 6ae:	a0 f0       	brcs	.+40     	; 0x6d8 <__fixunssfsi+0x38>
 6b0:	d1 f0       	breq	.+52     	; 0x6e6 <__fixunssfsi+0x46>
 6b2:	66 0f       	add	r22, r22
 6b4:	77 1f       	adc	r23, r23
 6b6:	88 1f       	adc	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	1a f0       	brmi	.+6      	; 0x6c2 <__fixunssfsi+0x22>
 6bc:	ba 95       	dec	r27
 6be:	c9 f7       	brne	.-14     	; 0x6b2 <__fixunssfsi+0x12>
 6c0:	12 c0       	rjmp	.+36     	; 0x6e6 <__fixunssfsi+0x46>
 6c2:	b1 30       	cpi	r27, 0x01	; 1
 6c4:	81 f0       	breq	.+32     	; 0x6e6 <__fixunssfsi+0x46>
 6c6:	5e d0       	rcall	.+188    	; 0x784 <__fp_zero>
 6c8:	b1 e0       	ldi	r27, 0x01	; 1
 6ca:	08 95       	ret
 6cc:	5b c0       	rjmp	.+182    	; 0x784 <__fp_zero>
 6ce:	67 2f       	mov	r22, r23
 6d0:	78 2f       	mov	r23, r24
 6d2:	88 27       	eor	r24, r24
 6d4:	b8 5f       	subi	r27, 0xF8	; 248
 6d6:	39 f0       	breq	.+14     	; 0x6e6 <__fixunssfsi+0x46>
 6d8:	b9 3f       	cpi	r27, 0xF9	; 249
 6da:	cc f3       	brlt	.-14     	; 0x6ce <__fixunssfsi+0x2e>
 6dc:	86 95       	lsr	r24
 6de:	77 95       	ror	r23
 6e0:	67 95       	ror	r22
 6e2:	b3 95       	inc	r27
 6e4:	d9 f7       	brne	.-10     	; 0x6dc <__fixunssfsi+0x3c>
 6e6:	3e f4       	brtc	.+14     	; 0x6f6 <__fixunssfsi+0x56>
 6e8:	90 95       	com	r25
 6ea:	80 95       	com	r24
 6ec:	70 95       	com	r23
 6ee:	61 95       	neg	r22
 6f0:	7f 4f       	sbci	r23, 0xFF	; 255
 6f2:	8f 4f       	sbci	r24, 0xFF	; 255
 6f4:	9f 4f       	sbci	r25, 0xFF	; 255
 6f6:	08 95       	ret

000006f8 <__fp_cmp>:
 6f8:	99 0f       	add	r25, r25
 6fa:	00 08       	sbc	r0, r0
 6fc:	55 0f       	add	r21, r21
 6fe:	aa 0b       	sbc	r26, r26
 700:	e0 e8       	ldi	r30, 0x80	; 128
 702:	fe ef       	ldi	r31, 0xFE	; 254
 704:	16 16       	cp	r1, r22
 706:	17 06       	cpc	r1, r23
 708:	e8 07       	cpc	r30, r24
 70a:	f9 07       	cpc	r31, r25
 70c:	c0 f0       	brcs	.+48     	; 0x73e <__fp_cmp+0x46>
 70e:	12 16       	cp	r1, r18
 710:	13 06       	cpc	r1, r19
 712:	e4 07       	cpc	r30, r20
 714:	f5 07       	cpc	r31, r21
 716:	98 f0       	brcs	.+38     	; 0x73e <__fp_cmp+0x46>
 718:	62 1b       	sub	r22, r18
 71a:	73 0b       	sbc	r23, r19
 71c:	84 0b       	sbc	r24, r20
 71e:	95 0b       	sbc	r25, r21
 720:	39 f4       	brne	.+14     	; 0x730 <__fp_cmp+0x38>
 722:	0a 26       	eor	r0, r26
 724:	61 f0       	breq	.+24     	; 0x73e <__fp_cmp+0x46>
 726:	23 2b       	or	r18, r19
 728:	24 2b       	or	r18, r20
 72a:	25 2b       	or	r18, r21
 72c:	21 f4       	brne	.+8      	; 0x736 <__fp_cmp+0x3e>
 72e:	08 95       	ret
 730:	0a 26       	eor	r0, r26
 732:	09 f4       	brne	.+2      	; 0x736 <__fp_cmp+0x3e>
 734:	a1 40       	sbci	r26, 0x01	; 1
 736:	a6 95       	lsr	r26
 738:	8f ef       	ldi	r24, 0xFF	; 255
 73a:	81 1d       	adc	r24, r1
 73c:	81 1d       	adc	r24, r1
 73e:	08 95       	ret

00000740 <__fp_split3>:
 740:	57 fd       	sbrc	r21, 7
 742:	90 58       	subi	r25, 0x80	; 128
 744:	44 0f       	add	r20, r20
 746:	55 1f       	adc	r21, r21
 748:	59 f0       	breq	.+22     	; 0x760 <__fp_splitA+0x10>
 74a:	5f 3f       	cpi	r21, 0xFF	; 255
 74c:	71 f0       	breq	.+28     	; 0x76a <__fp_splitA+0x1a>
 74e:	47 95       	ror	r20

00000750 <__fp_splitA>:
 750:	88 0f       	add	r24, r24
 752:	97 fb       	bst	r25, 7
 754:	99 1f       	adc	r25, r25
 756:	61 f0       	breq	.+24     	; 0x770 <__fp_splitA+0x20>
 758:	9f 3f       	cpi	r25, 0xFF	; 255
 75a:	79 f0       	breq	.+30     	; 0x77a <__fp_splitA+0x2a>
 75c:	87 95       	ror	r24
 75e:	08 95       	ret
 760:	12 16       	cp	r1, r18
 762:	13 06       	cpc	r1, r19
 764:	14 06       	cpc	r1, r20
 766:	55 1f       	adc	r21, r21
 768:	f2 cf       	rjmp	.-28     	; 0x74e <__fp_split3+0xe>
 76a:	46 95       	lsr	r20
 76c:	f1 df       	rcall	.-30     	; 0x750 <__fp_splitA>
 76e:	08 c0       	rjmp	.+16     	; 0x780 <__fp_splitA+0x30>
 770:	16 16       	cp	r1, r22
 772:	17 06       	cpc	r1, r23
 774:	18 06       	cpc	r1, r24
 776:	99 1f       	adc	r25, r25
 778:	f1 cf       	rjmp	.-30     	; 0x75c <__fp_splitA+0xc>
 77a:	86 95       	lsr	r24
 77c:	71 05       	cpc	r23, r1
 77e:	61 05       	cpc	r22, r1
 780:	08 94       	sec
 782:	08 95       	ret

00000784 <__fp_zero>:
 784:	e8 94       	clt

00000786 <__fp_szero>:
 786:	bb 27       	eor	r27, r27
 788:	66 27       	eor	r22, r22
 78a:	77 27       	eor	r23, r23
 78c:	cb 01       	movw	r24, r22
 78e:	97 f9       	bld	r25, 7
 790:	08 95       	ret

00000792 <__gesf2>:
 792:	b2 df       	rcall	.-156    	; 0x6f8 <__fp_cmp>
 794:	08 f4       	brcc	.+2      	; 0x798 <__gesf2+0x6>
 796:	8f ef       	ldi	r24, 0xFF	; 255
 798:	08 95       	ret

0000079a <__mulsf3>:
 79a:	0b d0       	rcall	.+22     	; 0x7b2 <__mulsf3x>
 79c:	78 c0       	rjmp	.+240    	; 0x88e <__fp_round>
 79e:	69 d0       	rcall	.+210    	; 0x872 <__fp_pscA>
 7a0:	28 f0       	brcs	.+10     	; 0x7ac <__mulsf3+0x12>
 7a2:	6e d0       	rcall	.+220    	; 0x880 <__fp_pscB>
 7a4:	18 f0       	brcs	.+6      	; 0x7ac <__mulsf3+0x12>
 7a6:	95 23       	and	r25, r21
 7a8:	09 f0       	breq	.+2      	; 0x7ac <__mulsf3+0x12>
 7aa:	5a c0       	rjmp	.+180    	; 0x860 <__fp_inf>
 7ac:	5f c0       	rjmp	.+190    	; 0x86c <__fp_nan>
 7ae:	11 24       	eor	r1, r1
 7b0:	ea cf       	rjmp	.-44     	; 0x786 <__fp_szero>

000007b2 <__mulsf3x>:
 7b2:	c6 df       	rcall	.-116    	; 0x740 <__fp_split3>
 7b4:	a0 f3       	brcs	.-24     	; 0x79e <__mulsf3+0x4>

000007b6 <__mulsf3_pse>:
 7b6:	95 9f       	mul	r25, r21
 7b8:	d1 f3       	breq	.-12     	; 0x7ae <__mulsf3+0x14>
 7ba:	95 0f       	add	r25, r21
 7bc:	50 e0       	ldi	r21, 0x00	; 0
 7be:	55 1f       	adc	r21, r21
 7c0:	62 9f       	mul	r22, r18
 7c2:	f0 01       	movw	r30, r0
 7c4:	72 9f       	mul	r23, r18
 7c6:	bb 27       	eor	r27, r27
 7c8:	f0 0d       	add	r31, r0
 7ca:	b1 1d       	adc	r27, r1
 7cc:	63 9f       	mul	r22, r19
 7ce:	aa 27       	eor	r26, r26
 7d0:	f0 0d       	add	r31, r0
 7d2:	b1 1d       	adc	r27, r1
 7d4:	aa 1f       	adc	r26, r26
 7d6:	64 9f       	mul	r22, r20
 7d8:	66 27       	eor	r22, r22
 7da:	b0 0d       	add	r27, r0
 7dc:	a1 1d       	adc	r26, r1
 7de:	66 1f       	adc	r22, r22
 7e0:	82 9f       	mul	r24, r18
 7e2:	22 27       	eor	r18, r18
 7e4:	b0 0d       	add	r27, r0
 7e6:	a1 1d       	adc	r26, r1
 7e8:	62 1f       	adc	r22, r18
 7ea:	73 9f       	mul	r23, r19
 7ec:	b0 0d       	add	r27, r0
 7ee:	a1 1d       	adc	r26, r1
 7f0:	62 1f       	adc	r22, r18
 7f2:	83 9f       	mul	r24, r19
 7f4:	a0 0d       	add	r26, r0
 7f6:	61 1d       	adc	r22, r1
 7f8:	22 1f       	adc	r18, r18
 7fa:	74 9f       	mul	r23, r20
 7fc:	33 27       	eor	r19, r19
 7fe:	a0 0d       	add	r26, r0
 800:	61 1d       	adc	r22, r1
 802:	23 1f       	adc	r18, r19
 804:	84 9f       	mul	r24, r20
 806:	60 0d       	add	r22, r0
 808:	21 1d       	adc	r18, r1
 80a:	82 2f       	mov	r24, r18
 80c:	76 2f       	mov	r23, r22
 80e:	6a 2f       	mov	r22, r26
 810:	11 24       	eor	r1, r1
 812:	9f 57       	subi	r25, 0x7F	; 127
 814:	50 40       	sbci	r21, 0x00	; 0
 816:	8a f0       	brmi	.+34     	; 0x83a <__mulsf3_pse+0x84>
 818:	e1 f0       	breq	.+56     	; 0x852 <__mulsf3_pse+0x9c>
 81a:	88 23       	and	r24, r24
 81c:	4a f0       	brmi	.+18     	; 0x830 <__mulsf3_pse+0x7a>
 81e:	ee 0f       	add	r30, r30
 820:	ff 1f       	adc	r31, r31
 822:	bb 1f       	adc	r27, r27
 824:	66 1f       	adc	r22, r22
 826:	77 1f       	adc	r23, r23
 828:	88 1f       	adc	r24, r24
 82a:	91 50       	subi	r25, 0x01	; 1
 82c:	50 40       	sbci	r21, 0x00	; 0
 82e:	a9 f7       	brne	.-22     	; 0x81a <__mulsf3_pse+0x64>
 830:	9e 3f       	cpi	r25, 0xFE	; 254
 832:	51 05       	cpc	r21, r1
 834:	70 f0       	brcs	.+28     	; 0x852 <__mulsf3_pse+0x9c>
 836:	14 c0       	rjmp	.+40     	; 0x860 <__fp_inf>
 838:	a6 cf       	rjmp	.-180    	; 0x786 <__fp_szero>
 83a:	5f 3f       	cpi	r21, 0xFF	; 255
 83c:	ec f3       	brlt	.-6      	; 0x838 <__mulsf3_pse+0x82>
 83e:	98 3e       	cpi	r25, 0xE8	; 232
 840:	dc f3       	brlt	.-10     	; 0x838 <__mulsf3_pse+0x82>
 842:	86 95       	lsr	r24
 844:	77 95       	ror	r23
 846:	67 95       	ror	r22
 848:	b7 95       	ror	r27
 84a:	f7 95       	ror	r31
 84c:	e7 95       	ror	r30
 84e:	9f 5f       	subi	r25, 0xFF	; 255
 850:	c1 f7       	brne	.-16     	; 0x842 <__mulsf3_pse+0x8c>
 852:	fe 2b       	or	r31, r30
 854:	88 0f       	add	r24, r24
 856:	91 1d       	adc	r25, r1
 858:	96 95       	lsr	r25
 85a:	87 95       	ror	r24
 85c:	97 f9       	bld	r25, 7
 85e:	08 95       	ret

00000860 <__fp_inf>:
 860:	97 f9       	bld	r25, 7
 862:	9f 67       	ori	r25, 0x7F	; 127
 864:	80 e8       	ldi	r24, 0x80	; 128
 866:	70 e0       	ldi	r23, 0x00	; 0
 868:	60 e0       	ldi	r22, 0x00	; 0
 86a:	08 95       	ret

0000086c <__fp_nan>:
 86c:	9f ef       	ldi	r25, 0xFF	; 255
 86e:	80 ec       	ldi	r24, 0xC0	; 192
 870:	08 95       	ret

00000872 <__fp_pscA>:
 872:	00 24       	eor	r0, r0
 874:	0a 94       	dec	r0
 876:	16 16       	cp	r1, r22
 878:	17 06       	cpc	r1, r23
 87a:	18 06       	cpc	r1, r24
 87c:	09 06       	cpc	r0, r25
 87e:	08 95       	ret

00000880 <__fp_pscB>:
 880:	00 24       	eor	r0, r0
 882:	0a 94       	dec	r0
 884:	12 16       	cp	r1, r18
 886:	13 06       	cpc	r1, r19
 888:	14 06       	cpc	r1, r20
 88a:	05 06       	cpc	r0, r21
 88c:	08 95       	ret

0000088e <__fp_round>:
 88e:	09 2e       	mov	r0, r25
 890:	03 94       	inc	r0
 892:	00 0c       	add	r0, r0
 894:	11 f4       	brne	.+4      	; 0x89a <__fp_round+0xc>
 896:	88 23       	and	r24, r24
 898:	52 f0       	brmi	.+20     	; 0x8ae <__fp_round+0x20>
 89a:	bb 0f       	add	r27, r27
 89c:	40 f4       	brcc	.+16     	; 0x8ae <__fp_round+0x20>
 89e:	bf 2b       	or	r27, r31
 8a0:	11 f4       	brne	.+4      	; 0x8a6 <__fp_round+0x18>
 8a2:	60 ff       	sbrs	r22, 0
 8a4:	04 c0       	rjmp	.+8      	; 0x8ae <__fp_round+0x20>
 8a6:	6f 5f       	subi	r22, 0xFF	; 255
 8a8:	7f 4f       	sbci	r23, 0xFF	; 255
 8aa:	8f 4f       	sbci	r24, 0xFF	; 255
 8ac:	9f 4f       	sbci	r25, 0xFF	; 255
 8ae:	08 95       	ret

000008b0 <_exit>:
 8b0:	f8 94       	cli

000008b2 <__stop_program>:
 8b2:	ff cf       	rjmp	.-2      	; 0x8b2 <__stop_program>
